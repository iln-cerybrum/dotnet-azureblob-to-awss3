{

	//TRANSFER FROM:
	"azure": {
		"StorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=example;AccountKey=sdhfdshfkdjhfsdjfhdsk;EndpointSuffix=core.windows.net",
		"ContainerName": "CONTAINER_NAME"
	},
	
	//TRANSFER TO:
	"aws": {
		//create an IAM user that has read/write access to the bucket, then add an Access Key for the user and paste the key and secret here
		"AccessKey": "PASTE_ACCESS_KEY_HERE",
		"SecretKey": "PASTE_ACCESS_KEY_SECRET_HERE",
		//the S3 bucket this will be transfered to
		"Bucket": "BUCKET_NAME_GOES_HER",
		"Region": "us-east-1",
		/* 
			This will affect storage pricing. Valid values are:
		  - STANDARD, STANDARD_IA, REDUCED_REDUNDANCY, INTELLIGENT_TIERING, GLACIER, DEEP_ARCHIVE
		  (SEE S3StorageClass for all values)
		*/
		"StorageClass": "STANDARD_IA",
		/* an optional folder name. Be sure to include the trailing slash. e.g. myfolder/mysubfolder/
			 leave blank to go into the root of the bucket
		*/
		"FolderPath": "files/"
	},

	"transferBehavior": {
		// If true, then if a file exists at destination, it will overwrite it
		"OverwriteFilesIfExists": false,
		/* 
			- If the app fails midway, when you start it again, it will use the local logs to retrieve the pending transfers. 
			- if true, this will log successfull transfers in a local log. 	
			- if false, it will retrieve all files from the source container and start all over again 
		*/
		"TrackTransfersInLocalLogs": true,
		/*
		The name of the log file that will be created if "TrackTransfersInLocalLogs" is true. 
		When doing sequential runs it will load this log file to see what needs to be transferred. 
		If the file key is different, meaning that aws or azure settings have changed, it will clear this log file and start new. 
		If you wish to retain a log file for a run, change the name of this after a successful run to something else
		*/
		"LogFileName": "transfer.log",
		//how many parallel transfers can happen at a time
		"MaxTransfersAtATime": 10
	}
}
